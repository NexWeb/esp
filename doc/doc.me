/*
    doc.me -- MakeMe file for ESP documentation 
 */

Me.load({

    targets: {
        patch: {
            action: `
                trace('Patch', 'Patch version string ${settings.version}')
                let path = Path('product/version.html')
                let settings = me.settings
                path.write(path.readString().replace(/<body>.*<.body>/, '<body>' + settings.version + '</body>'))
                path = Path('dsi/head.html')
                path.write(path.readString().replace(/<title>.*<.title>/, 
                    '<title>' + settings.title + ' ' + settings.version + ' Documentation</title>'))

                trace('Patch', 'Expand DSI')
                let path = Path('dsi/head.html')
                path.write(path.readString().replace(/version\">.*</, 'version\">' + 
                    settings.title + ' ' + settings.version + '<'))
                for each (path in Path('.').files('**.html', {exclude: /Bare.html|dsi/})) {
                    vtrace('Patch', path)
                    run(['dsi', '-I ', path])
                }
            `
        },

        api: {
            action: `
                apidoc('api/edi.dox', ['${SRC}/src/edi.h', '${SRC}/src/mdb.h' ], 'EDI', ls('api/*.tags'))
                apidoc('api/esp.dox', ['${SRC}/src/esp.h'], 'ESP', ls('api/*.tags'))
                Path('../src/paks/mpr/doc/api/mprBare.html').copy('api/mprBare.html')
                Path('../src/paks/http/doc/api/httpBare.html').copy('api/httpBare.html')
                for each (let f: Path in ['api/http.html', 'api/mpr.html', 'api/esp.html', 'api/edi.html']) {
                    trace('Generate', f)
                    apiwrap(f)
                    f.write(f.readString().replace(/mprBare.html/g, 'mpr.html').
                                           replace(/httpBare.html/g, 'http.html').
                                           replace(/external=\"mpr.dtags\"/g, '').
                                           replace(/external=\"http.dtags\"/g, ''))
                }
            `,
        },

        'esp-doc': {
            action: `
                if (Cmd.locate('ejsc')) {
                    let list = Path('api/esp-angular/masters').files('*.es')
                    run('ejsc --doc '  + list.join(' '))
                    run('ejsmod --html api/esp-angular ' + Path('.').files('*.mod').join(' '))
                    for each (path in Path('api/esp-angular/masters').files(['*.html', '*.css'])) {
                        path.copy('api/esp-angular/' + path.basename)
                    }
                    Path('api/esp-angular/masters/banner.jpg').copy('api/esp-angular/images/banner.jpg')
                    for each (path in Path('.').files('*.mod')) {
                        path.remove()
                    }
                }
            `,
        },

        tidy: {
            action: `
                for each (path in Path('.').files('**.html', { exclude: /\\/$|dsi|Base|Bare/ })) {
                    trace('Tidy', path)
                    run('tidy -q -config tidy.conf ' + path)
                }
            `,
        },

        'validate-doc': {
            action: `
                let vdir = me.dir.cfg.join('validate')
                vdir.removeAll()
                for each (file in Path('.').files('**', { exclude: /\\/$|dsi|Base|Bare/ })) {
                    let out = vdir.join(file)
                    out.dirname.makeDir()
                    if (file.extension == 'html') {
                        out.write(file.readString().replace(/<pre>((?!pre>)(?:.|\\s))*pre>/mg, '<pre>DELETED</pre>'))
                    } else {
                        out.write(file.readString())
                    }
                }
                trace('Prepare', vdir)
            `,
        },

        'clean-doc': {
            type: 'clean',
            action: `
                rmdir(['../doc/api/html', '../doc/api/xml'])
            `
        },
    
    },
})
