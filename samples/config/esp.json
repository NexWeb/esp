/*
    esp.json - ESP configuration file

    The file is an enhanced JSON file. Property keys do not need to be enclosed in quotes.
    Also the last property in a collection may be terminated with a comma, and strings may
    span multiple lines.
*/
{
    /*
        Single word application name. Must be a C identifier.
        This is typically provided by the package.json instead.
     */
    name: "blog",

    /*
        Multi-word title for the application. Used for display.
        This is typically provided by the package.json instead.
     */
    title: "My Blog",

    /*
        One-line description for the application. Used in the Pak catalog.
        This is typically provided by the package.json instead.
     */
    description: "My Blog detailing adventures in the Artic",

    /*
        SemVer compatible version string
        This is typically provided by the package.json instead.
     */
    version: "1.0.0",

    /*
        Opportunity to remap directories. These are the default values.
     */
    directories: {
        "cache": "cache",
        "controllers": "controllers",
        "db": "db",
        "documents": "documents",
        "home": ".",
        "layouts": "layouts",
        "lib": "lib",
        "paks": "paks",
        "pakscache": "~/.paks",
        "partials": "partials",
        "source": "source",
        "src": "src",
        "top": ".",
        "upload": "/tmp",
    },

    esp: {
        /*
            Load external esp applications. Can also use string or [prefix+config] property form.
                apps: 'myapp/esp.json',
                apps: [
                    { prefix: '/blog', config: 'blog/esp.json' }
                ],
         */
        apps: [
            'apps/*/esp.json'
        ],

        /*
            Combine ESP into one single library
         */
        combine: true,

        /*
            Templates used for "esp generate"
         */
        generate: {
            "appweb": "esp-best/appweb.conf",
            "clientController": "esp-angular-mvc/controller.js",
            "clientEdit": "esp-angular-mvc/edit.html",
            "clientList": "esp-angular-mvc/list.html",
            "clientModel": "esp-angular-mvc/model.js",
            "controller": "esp-mvc/controller.c",
            "controllerSingleton": "esp-angular-mvc/generate/controllerSingleton.c",
            "migration": "esp-mvc/migration.c",
            "module": "esp-mvc/src/app.c",
        },

        /*
            Selection of properties to send to the client
         */
        mappings: {
            auth: {
                login:    "http.auth.auto",
                store:    "http.auth.store",
            },
            formats:      "http.formats",
            prefix:       "http.prefix",
            timeouts:     "http.timeouts",
        },

        /*
            How to compile ESP components. Set to true to optimize, set to false for 
            symbolic debugging support.
         */
        optimize: false,
    },

    /*
        HTTP related configuration
     */
    http: {
        /*
            Server related configuration that applies globally
            Ignored if hosted in Appweb, when server configuration comes from appweb.conf.
         */
        server: {
            /*
                Account execution 
             */
            account: {
                /*
                    Run as user
                 */
                user: "name",

                /*
                    Run as member of group
                 */
                group: "name",
            },

            /*
                Change the file system root. Unix only.
             */
            chroot: "/path",

            /*
                Defensive counter-measures. These are referenced by "monitors"
             */
            defenses: {
                /*
                    Name of defense and collection of properties for the remedy
                 */
                block: {
                    "remedy": "ban",
                    "status": 406,
                    "message": "Client temporarily banned due to monitored limit exceeded",
                    "period": "30mins",
                },
            },

            /*
                Listening endpoints. Ignored if hosted.
             */
            listen: [
                "http://*:4000",
                "http://127.0.0.1:4000",
                "https://127.0.0.1:4443",
            ],

            /*
                Log file configuration
             */
            log: {
                /*
                    Log filename or destination
                 */
                location: "stdout",

                /*
                    Verbosity level (0-5)
                 */
                level: "2",

                /*
                    Keep up to 5 log files 
                 */
                backup: 5,

                /*
                    Start a new log file on restart
                 */
                anew: true,

                /*
                    Maximum log file size before starting a new log file
                 */
                size: "10MB",

                /*
                    Add a timestamp to the log file
                 */
                timestamp: "1hr",
            },

            /*
                Defensive counter-measure monitor policies
             */
            monitors: {
                /*  
                    Name of monitor 
                 */
                missing: {
                    /*
                        Monitor expression to evaluate
                     */
                    "expression": "NotFoundErrors > 5",

                    /*
                        Frequence to check the monitor expression
                     */
                    "period": "10 secs",

                    /*
                        List of defenses to invoke if monitor expression is true
                     */
                    "defenses": [ "block" ],

                    /*
                        Enable or disable the monitor
                     */
                    "enable": true,
                },
            },
            /*
                SSL configuration
             */
            ssl: {
                /*
                    Certificate authority of root certificates to verify peers
                 */
                authority: {
                    /*
                        File of catentated certificates
                     */
                    file: "",

                    /*
                        Directory of certificates
                     */
                    directory:  "",
                },
                /*
                    Server's own certificate filename
                 */
                certificate: "server.crt",

                /*
                    Ordered list of preferred ciphers
                 */
                ciphers: [
                    "TLS_RSA_WITH_AES_256_CBC_SHA",
                    "TLS_RSA_WITH_RC4_128_SHA"
                ],
                /*
                    Server private key file
                 */
                key: "server.key",

                /*
                    Supported protocols
                 */
                protocols: [
                    'all', '-sslv3', '+tls', '-tlsv1.1', 'tlsv1.2'
                ],

                /*
                    Verification options
                 */
                verify: {
                    /*
                        Verification the client certificate. Self-signed certificates permitted.
                     */
                    client: true,
                    /*
                        Verification the client certificate issuer. Self-signed certificates not permitted.
                     */
                    issuer: true,
                },
            },
        },

        /*
            All the properties below apply on a per-route basis
         */

        /*
            Alias a URL prefix to a directory under the route home
         */
        aliases: {
            '/cgi-bin/': 'cgi-bin',
        },

        /*
            Authentication configuration
         */
        auth: {
            /*
                Login configuration
             */
            auto: {
                /*
                    Give the auto-logged-in user these abilities
                 */
                abilities: [ "*" ],

                /*
                    Automatically login as this username
                 */
                name: "",

                /*
                    URL for the application login dialog
                 */
                url: "",
            },

            /*
                Authentication realm
             */
            realm: "example.com",

            /*
                Required usernames or roles for user to posses before authorizing
             */
            require: {
                /*
                    List of roles a user must posess before authorized for access to documents in this route
                 */
                roles: [],

                /*
                    Restrict login to this set of users. Set to true or ["*"] for any valid user.
                 */
                users: ["*"]
            },

            /*
                Defined roles for users with abilities that comprise the roles.
             */
            roles: {
                "executive":     ["manage", "direct"],
                "user":          ["view"],
                "administrator": ["view", "edit"],
            },

            /*
                Define user accounts. More typically, these are stored in a database.
             */
            users: {
                ralph: {
                    password: "BF1:00128:bWFG5x85BYfuf7GW:w+zzIU0WTZQYaNAe0sPecWyry8Z9GrKH",
                    roles:    ["user", "administrator", "purchase"],
                },
            },

            session: {
                /*
                    Define the session cookie prefix
                 */
                cookie: "-esp-cookie-",

                /*
                    Enable / disable sessions
                 */
                enable: true,

                /*
                    Persist session cookie to disk. Means browser restarts do not exit session.
                    If true, an Expires field is included in the cookie.
                 */
                persist: true,

                /*
                    Determine if the cookie is visible to browser scripts
                 */
                visible: true,
            },

            /* 
                Auth Store to use, "app" means user credentials are stored in a server-side application database
                Set to "app", "config" or "system".
             */
            store: "app",

            /*
                Type of authentication protocol to use
             */
            type: "basic|digest",
        },
        
        /*
            Response caching directives
            Can also just set "cache" to true which defines a client cache of 1 day for common static file types.
         */
        cache: [ {
            /*
                Cache at the client 
             */ 
            client: "1day",

            /*
                Cache at the server
             */
            server: "1hour",
            
            /*
                File extensions to cache
             */
            extensions: [ "css", "gif", "ico", "jpeg", "jpg", "js", "html", "less", "png", "pdf", "txt" ],

            /*
                URLs to cache. If the URL has a query, then only that exact request will be cached.
                The query should be in sorted urlencoded form. If omitted, defaults to "/"
             */
            urls: [ "/" ],

            /*
                Request methods eligible for caching. If omitted, defaults to all methods.
             */
            methods: [ "*" ],

            /*
                Responses to cache based on mime type for the response document. If omitted, defaults to all mime types.
             */
            mime: [ "*" ],

            /*
                Caching of responses will be handled manually. Automatic response caching is disabled. Defaults to false.
             */
            manual: true,

            /*
                Uniquely cache requests with different parameters (query and post data). Defaults to false.
             */
            unique: true,
        } ],

        /*
            Serve compressed content
            Can also set to an array of extensions to serve compressed.
         */
        compress: true,

        /*
            Database specification. Supported providers: sdb for SQLite and mdb for Memory Database.
         */
        database: "mdb://blog.mdb",

        /*
            Delete file uploads after the request completes
         */
        deleteUploads: true,

        /*
            Documents to serve. Same as {directories: documents: 'DIR' }
         */
        documents: 'directory',

        /*
            Domain to service. This supports virtual hosting. If the name contains "*", it tests if the
            request Host header contains the substring.
         */
        domain: "*embedthis",

        /*
            Error pages to serve for specific error response codes
         */
        errors: {
            "404": "/notFound.html",
        },

        /*
            Default presentation formats for various types
         */
        formats: {
            "date": "yyyy-MM-dd",
            "float": 2,
            /*
                Expect requests and responses in JSON format
             */
            "response": "json",
        },

        /*
            Response header management
         */
        headers: {
            /*
                Headers to add if not already defined
             */
            add: {
                "Content-Security-Policy":   "allow \"self\"; unsafe-inline; img-src \"self\"",
                "Strict-Transport-Security": "max-age=31536000; includeSubDomains",
                "CrossOrigin":               "origin=* credentials=yes headers=X-CORS-HEADER age=3000",
            },
            /*
                Headers to remove
             */
            remove: [],

            /*
                Headers to set and overwrite any existing headers
             */
            set: { },
        },

        /*
            Home directory for the server. Same as {directories: home: 'DIR' }
         */
        home: 'directory',

        /*
            List of index documents to serve for directory level requests
         */
        indexes: [
            "index.esp",
            "index.html"
        ],

        /*
            Keep intermediate forms
         */
        keep: true,

        /*
            Per-language content
         */
        languages: {
            /*
                Language code
             */
            en: {
                /*
                    If using a directory per-language
                 */
                path: "/path/to/english",

                /*
                    If using a document prefix per-language
                 */
                prefix: "en",

                /*
                    If using a document suffix per-language
                 */
                suffix: "en",

                /*
                    Set to true if this is the default language
                 */
                "default": true,
            }
        },

        /*
            Sandbox limits
         */
        limits: {
            buffer:             "32KB",         /* Default buffer size */
            cache:              "10MB",         /* Maximum response cache size */
            cacheItem:          "200KB",        /* Per-item max cache size */
            chunk:              "64KB",         /* Default chunk encoding size */
            clients:            100,            /* Maximum number of simultaneous clients */
            connections:        50,             /* Maximum number of simultaneous connections */
            files:              "unlimited",    /* Maximum number of open files */
            keepAlive:          200,            /* Number of request to permit on a connection */
            processes:          "unlimited",    /* Maximum number of processes to run */
            rxBody:             "100K",         /* Maximum receive body data */
            rxForm:             "32K",          /* Maximum receive form body data */
            rxHeader:           "32K",          /* Maximum receive HTTP headers size */
            memory:             "200MB",        /* Maximum memory heap usage */
            requests:           20,             /* Maximum simultaneous requests */
            sessions:           100,            /* Maximum client sessions */
            txBody:             "2GB",          /* Maximum transmit body size */
            upload:             "2GB",          /* Maximum file upload size */
            uri:                "8K",           /* Maximum URL size */
            webSockets:         20,             /* Maximum number of Web Sockets */
            webSocketsMessage:  "50K",          /* Maximum WebSockets message size */
            webSocketsPacket:   "50K",          /* Maximum WebSockets packet size */
            webSocketsFrame:    "4K",           /* Maximum Websockets frame size */
            workers:            4,              /* Maximum number of worker threads */
        },

        /*
            Supported request methods for this route. Use "*" for all methods, or omit definition. Upper case.
         */
        methods: [ "GET", "POST" ],

        /*
            Required request parameters before this route will match a request
         */
        params: [ {
            "name":   "name",
            "value":  "john",
            "equals": true,
        } ],

        /*
            Regular expression used to match the route with the request URI
         */
        pattern: "^/route/auth",

        /*
            Request pipeline construction
         */
        pipeline: {
            /*
                Ordered list of filters with extensions for which the filter will apply
             */
            filters: [{
                name: "uploadFilter",
                extensions: [ "txt", "*" ],
            }],
            /*
                Defined request handlers and the extensions for which they apply
             */
            handlers: {
                fileHandler: [ "html", "gif", "jpeg", "jpg", "png", "pdf", "ico", "css", "js", "txt" ],
                espHandler:  [ "*" ],
            },
        },

        /*
            Request URI prefix. This prefix is removed from the URI before processing the request.
         */
        prefix: "/route/auth",

        /*
            Redirections
         */
        redirect: [ {
                /* Redirect all traffic over SSL */
                status: 302,
                to:     "https://"
            }, {
                /* Redirect a specific document */
                from: "/pressRelease",
                status: 301,
                to: "${request.scheme}://${request:host}/fixedPressRelease.html"
            }
        ],

        /*
            Automatically rename file uploads to use the client specified filename after sanitizing.
            Recommended to NOT use this on any public network. Defaults to false.
         */
        renameUploads: true,

        /*
            List of routes
         */
        routes: [
        /*
            Routes may nest other routes under their own "routes" property.
            Properties can be a route-set name, or an array of routes objects.
            A route will typically define a "pattern" and may override most per-route properties.
         */
        /*
            For example:

            "esp-server",
            {
                pattern: '^/auth/basic',
                auth: {
                    realm: 'example.com',
                    type: 'basic|digest',
                },
            },
            {
                "resources": {
                    "sets": [
                        "esp-server"
                    ],
                    "groups": [
                        "user",
                    ],
                    "singletons": [
                        "dashboard",
                    ]
                }
            }
         */
        ],

        /*
            Supported scheme for this route. Set to https to require SSL.
         */
        scheme: "https",

        /*
            Display server-side errors in the browser
         */
        showErrors: true,

        /*
            Source file responsible for responding to the request.
         */
        source: "filename",

        /*
            Stealth mode operates a quietly as possible
         */
        stealth: true,

        /*
            Target rule to process the request
         */
        target: {
            operation: "run",
            args: "greetings-$1",
        },

        /*
            Default timeouts. Use strings with unit suffixes. "5mins"
         */
        timeouts: {
            /*
                Maximum time for application to exit when waiting for requests to complete 
             */
            exit:       "30secs",

            /*
                Maximum time to receive request headers
             */
            parse:      "20secs",

            /*
                Maximum time to of I/O inactivity for a request
             */
            inactivity: "300secs",

            /*
                Maximum request duration
             */
            request:    "infinite",

            /*
                Maximum user session duration
             */
            session: "30mins",
        },

        /*
            Request trace control
         */
        trace: {
            /*
                Trace output type (common, detail)
             */
            type: "detail",

            /*
                Common log format
             */
            format: "%h %l %u %t \"%r\" %>s %b %n",

            /*
                Request trace log filename or destination
             */
            location: "stdout",

            /*
                Default verbosity level (0-5)
             */
            level: "2",

            /*
                Levels at which to trace request events
             */
            levels: {
                request: 1,
                error: 2,
                result: 2,
                context: 3,
                form: 4,
                body: 5,
                debug: 5,
            },

            /*
                Keep up to 5 log files 
             */
            backup: 5,

            /*
                Start a new trace log file on restart
             */
            anew: true,

            /*
                Maximum file size before starting a new trace log file
             */
            size: "10MB",

            /*
                Maximum tx and rx content to trace
             */
            content: "1K",
        },

        /*
            Transparently recompile updated views, controllers and source
         */
        update: true,

        /*
            Set to include a XSRF token to minimize CSRF vulnerabilies
         */
        xsrf: true,
    },

    /*
        Mode specific property collections. The designated mode collection is copied to the top level.
        The mode property set is selected by the package.json "mode" property.
     */
    modes: {
        debug: { 
            /*
                Collection of properties that are copied to the top-level if in debug mode
             */
        },
        release: {
            /*
                Collection of properties that are copied to the top level if in release mode
             */
        }
    }
}
