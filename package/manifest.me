/*
    manifest.me - MakeMe Manifest for ESP
 */

Me.load({
    /*
        Package manifest instructions

        The sets used are: binary, service, test, doc, dev, package, source
     */
    manifest: {
        home: me.dir.bin,
        packages:   {
            install: {
                inherit:    'package-manifest',
                prefixes:   [ 'root', 'app', 'vapp', 'bin', 'inc', 'man'],
                sets:       [ 'core', 'libs', 'doc' ],
                platforms:  [ 'windows', 'unix' ]
            },
            binary: {
                inherit:    'package-manifest',
                prefixes:   [ 'root', 'app', 'vapp', 'bin', 'inc', 'man'],
                formats:    [ 'native', 'tar' ],
                sets:       [ 'core', 'libs', 'doc', 'package' ],
                platforms:  [ 'freebsd', 'linux', 'windows', 'macosx' ]
            },
            source: {
                inherit:    'package-manifest',
                prefixes:   [ 'root', 'src'],
                formats:    [ 'tar' ],
                sets:       [ 'source' ],
            },
            pak: {
                inherit:    'package-manifest',
                prefixes:   [ 'src'],
                formats:    [ 'tar' ],
                sets:       [ 'pak' ],
            },
        },

        sets: {
            core: [ 
                {   
                    from:       'esp${EXE}',
                    to:         '${abin}/',
                    symlink:    '${bin}/',

                }, { 
                    from:       'espman${EXE}',
                    to:         '${abin}/',
                    symlink:    '${bin}/',

                }, { 
                    from: [
                                'libssl*${SHOBJ}*',
                                'libcrypto*${SHOBJ}*',
                    ],
                    to:         '${abin}/',
                    enable:     "me.platform.os != 'windows' && !makeme.options.gen",
                    ifdef:      'openssl',

                }, { 
                    from: [
                                'libeay32${SHOBJ}',
                                'ssleay32${SHOBJ}',
                    ],
                    to:         '${abin}/',
                    enable:     "me.platform.os == 'windows'",
                    ifdef:      'openssl',

                }, { 
                    from:       'ca.crt',
                    to:         '${abin}/',

                }, {
                    //  UNUSED
                    perform:    function() {
                        for each (pak in Path(me.dir.paks).files(['esp-*'])) {
                            let version = pak.join('package.json').readJSON().version || '0.0.0'
                            let dir = me.globals.abin.join('../esp', pak.basename, version)
                            makeDirectory(dir)
                            for each (from in pak.files('**')) {
                                let base = from.relativeTo(me.dir.paks)
                                let stem = base.components.slice(1).join(from.separator)
                                let to = dir.join(stem)
                                if (from.isDir) {
                                    makeDirectory(to)
                                } else {
                                    copyFile(from, to)
                                }
                            }
                        }
                    },

                }, {
                    from:       'esp-compile.json',
                    to:         '${abin}/',
                }
            ],
            libs: [
                {
                    from: [
                                'libhttp${SHOBJ}',
                                'libmpr${SHOBJ}',
                                'libmprssl${SHOBJ}',
                                'libpcre${SHOBJ}',
                                'libsql${SHOBJ}',
                                'libesp${SHOBJ}',
                    ],
                    to:         '${abin}/',
                    enable:     '!me.settings.static',

                }, { 
                    from:       'libest${SHOBJ}',
                    to:         '${abin}/',
                    ifdef:      'est',
                    enable:     "!me.settings.static",

                }, { 
                    from: [
                                /* Windows needs the libs to be able to compile esp programs */
                                'libesp${SHLIB}',
                                'libpcre${SHLIB}',
                                'libhttp${SHLIB}',
                                'libmpr${SHLIB}',
                    ],
                    to:         '${abin}/',
                    enable:     "me.platform.os == 'windows' && !me.settings.static",

                }, { 
                    from:       'libmprssl${SHLIB}',
                    to:         '${abin}/',
                    ifdef:      'ssl',
                    enable:     "me.platform.os == 'windows' && !me.settings.static",

                }, {
                    home:       '${SRC}',
                    from:       [
                                '${INC}/me.h',
                                'src/esp.h',
                                'src/edi.h',
                                'src/paks/osdep/osdep.h',
                                'src/paks/est/est.h',
                                'src/paks/http/http.h',
                                'src/paks/mpr/mpr.h',
                                'src/paks/pcre/pcre.h',
                                'src/paks/sqlite/sqlite3.h',
                    ],
                    to:         '${vapp}/inc/',
                    symlink:    '${inc}/esp/',
                }
            ],
            doc: [
                { 
                    from:       '${SRC}/doc/source/man/esp.1',
                    to:         '${adoc}/man/man1/',
                    symlink:    '${man}/man1/',
                    enable:     "me.platform.like == 'unix'",
                }
            ],
            service: [
                {
                    name:        'Launch daemon script'
                    from:        '${SRC}/package/macosx/com.embedthis.esp.plist',
                    to:          '${root}/Library/LaunchDaemons/com.embedthis.esp.plist',
                    permissions: 0644,
                    user:        'root',
                    group:       'wheel',
                    root:        true,
                    enable:      "me.platform.os == 'macosx'",

                }, {
                    name:        'Init script'
                    from:        '${SRC}/package/linux/${settings.name}.init',
                    to:          '${root}/etc/init.d/${settings.name}',
                    permissions: 0755,
                    user:        'root',
                    group:       'root',
                    root:        true,
                    enable:      "me.platform.os == 'linux'",

                }, {
                    name:        'Upstart script'
                    from:        '${SRC}/package/linux/${settings.name}.upstart',
                    to:          '${root}/etc/init/${settings.name}.conf',
                    permissions: 0644,
                    user:        'root',
                    group:       'root',
                    root:        true,
                    enable:      "false && me.platform.os == 'linux'",
                /* Source Set */
                }
            ],
            source: [
                {
                    from:       '${SRC}/*.md',
                    to:         '${src}/',
                    fold:       true,
                    patch:      true,

                }, { 
                    from:       '${SRC}/configure',
                    to:         '${src}/',
                    permissions: 0755,     

                }, { 
                    home:       '${SRC}',
                    from: [ 
                                'Makefile', 
                                'make.bat', 
                                'main.me', 
                                'package.json', 
                                'src', 
                                'doc', 
                                'projects', 
                                'package' 
                    ],
                    to:     '${src}/',
                }
            ],
            pak: [
                {
                    from:       '${SRC}/package/esp.me',
                    to:         '${src}/esp.me',

                }, {
                    home:       '${SRC}',
                    from:       [
                        'src/edi.h',
                        'src/mdb.h',
                        'src/esp.h',
                    ],
                    to:         '${src}/esp.h',
                    append:     true, 
                    filter:     /^#inc.*edi.*$|^#inc.*mdb.*$/mg,
                    header:     '/*\n * ${settings.title} Library Source\n */\n#include "me.h"\n\n#if ME_COM_ESP\n\n#include "osdep.h"\n\n#ifndef ESP_VERSION\n    #define ESP_VERSION "${settings.version}"\n#endif',
                    footer:     '#endif /* ME_COM_ESP */',

                }, {
                    from:       '${SRC}/src/*.c', 
                    to:         '${src}/espLib.c',
                    append:     true,                                                                                         
                    filter:     /^#inc.*esp.*$|^#inc.*edi.*$|^#inc.*mdb.*$|^#inc.*customize.*$/mg,
                    exclude:    /esp.c$|\/paks\//,
                    header:     '/*\n * ${settings.title} Library Source\n */\n#include "esp.h"\n\n#if ME_COM_ESP',
                    footer:     '#endif /* ME_COM_ESP */',

                }, {
                    from:       '${SRC}/src/esp.c', 
                    to:         '${src}/esp.c',

                }, {
                    from:       '${SRC}/src/esp-compile.json', 
                    to:         '${src}/esp-compile.json',

                }, {
                    home:       '${SRC}',
                    from:   [
                                'doc/source/ref/api/esp.*', 
                                'doc/source/ref/api/edi.*',
                    ],
                    to:         '${src}/doc/api/',

                }, {
                    from:       '${SRC}/doc/source/man/*.1',
                    exclude:    /appman|makerom|manager|http.1|authpass.1/,
                    to:         '${src}/doc/source/man/',
                }
            ],
        }
    },
})
