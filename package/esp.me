/*
    esp.me -- MakeMe file to build the ESP library
 */

Me.load({

    targets: {
        esp: {
            configurable: true,
            depends:      [ 'libmod_esp', 'mdb' ],
            uses:         [ 'sqlite' ],
        },

        mdb: {
            configurable: true,
            description: 'Embedthis MDB Database',
        },

        'esp.h': {
            type: 'header',
            headers: [ '*.h' ],
        },

        libmod_esp: {
            type: 'lib',
            depends: [ 'libappweb', 'mdb' ],
            uses:    [ 'sqlite' ],
            sources: [ '*.c' ],
            exclude: /esp\.c/,
            headers: [ '*.h' ],
            ifdef:   [ 'esp' ],
        },

        espcmd: {
            path: '${BIN}/esp${EXE}',
            type: 'exe',
            depends: [ 'libmod_esp' ],
            sources: [ '*.c' ]
            platforms: [ 'local' ],
            ifdef:   [ 'esp' ],
        },

        'esp.conf': {
            type: 'file',
            files: [ 'esp.conf' ],
            ifdef: [ 'esp' ],
        },

        'esp-paks': {
            home: '${TOP}/src/paks',
            path: '${OUT}/esp/',
            files: [ 'esp-*/**' ],
            platforms: [ 'local' ],
            ifdef: ['esp'],
            'generate-capture': true,
            build: `
                trace('Copy', me.dir.out.join('esp'))
                for each (pak in Path('.').files('esp-*')) {
                    let version = pak.join('package.json').readJSON().version || '0.0.0'
                    makeDir(OUT.join('esp', pak, version))
                    for each (path in pak.files('**')) {
                        let stem = path.components.slice(1).join(path.separator)
                        let dest = OUT.join('esp', pak, version, stem)
                        if (path.isDir) {
                            makeDir(dest)
                        } else {
                            copyFile(path, dest)
                        }
                    }
                }
                if (Cmd.locate('pak') && !me.generating) {
                    run('pak -f -q cache ' + Path('.').files('esp-*').join(' '), {noshow: true}) 
                }
            `
        },

/* UNUSED
        UNUSED_pakcss: {
            action: `
                strace('Run', 'recess -compile paks/esp-angular-mvc/templates/esp-angular-mvc/client/css/all.less')
                let result = Cmd.run('recess -compile paks/esp-angular-mvc/templates/esp-angular-mvc/client/css/all.less')
                Path('paks/esp-angular-mvc/templates/esp-angular-mvc/client/css/all.css').write(result)

                strace('Run', 'recess -compile paks/esp-html-mvc/templates/esp-html-mvc/client/css/all.less')
                let result = Cmd.run('recess -compile paks/esp-html-mvc/templates/esp-html-mvc/client/css/all.less')
                Path('paks/esp-html-mvc/templates/esp-html-mvc/client/css/all.css').write(result)
            `
        },

        'UNUSED-esp-configure': {
            scripts: {
                postconfig: "
                    if (me.platform.os == 'vxworks') {
                        let evars = []
                        for (let [key,value] in me.env) {
                            evars.push('EspEnv ' + key + ' \"' + value + '\"\n')
                        }
                        me.dir.lib.join('esp-' + me.platform.os + '.conf').write(evars.join())
                    }
                ",
            },
        },

        UNUSED_pakvers: {
            action: `
                if (Cmd.locate('pak')) {
                    if (me.settings.version != Path('paks/esp-angular/package.json').readJSON().version) {
                        run('pak -dir paks/esp-angular edit version=${settings.version}')
                        run('pak -dir paks/esp-angular-mvc edit version=${settings.version}')
                        run('pak -dir paks/esp-server edit version=${settings.version}')
                        run('pak -dir paks/esp-html-mvc edit version=${settings.version}')
                        run('pak -dir paks/esp-legacy-mvc edit version=${settings.version}')
                    }
                }
            `
        }
*/
    },
})
